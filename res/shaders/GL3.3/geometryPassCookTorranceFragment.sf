// shadertype=glsl
#version 330 core
layout (location = 0) out vec4 uni_geometryPassRT0;
layout (location = 1) out vec4 uni_geometryPassRT1;
layout (location = 2) out vec4 uni_geometryPassRT2;
layout (location = 3) out vec4 uni_geometryPassRT3;

in vec3 thefrag_FragPos;
in vec2 thefrag_TexCoord;
in vec3 thefrag_Normal;
in vec4 thefrag_FragPosInLightSpace;

uniform bool uni_useTexture = true;

uniform sampler2D uni_normalTexture;
uniform sampler2D uni_albedoTexture;
uniform sampler2D uni_metallicTexture;
uniform sampler2D uni_roughnessTexture;
uniform sampler2D uni_aoTexture;

uniform vec3 uni_albedo;
uniform vec3 uni_MRA;

void main()
{    
	// let glsl calculate partial derivatives!
    vec3 Q1  = dFdx(thefrag_FragPos);
    vec3 Q2  = dFdy(thefrag_FragPos);
    vec2 st1 = dFdx(thefrag_TexCoord);
    vec2 st2 = dFdy(thefrag_TexCoord);

    vec3 N   = normalize(thefrag_Normal);
    vec3 T  = normalize(Q1*st2.t - Q2*st1.t);
    vec3 B  = -normalize(cross(N, T));

    mat3 TBN = mat3(T, B, N);

	vec3 normalToWorldSpace = normalize(TBN * (texture(uni_normalTexture, thefrag_TexCoord).rgb * 2.0 - 1.0));
	vec3 albedo;
	vec3 MRA;
	if(uni_useTexture)
	{	
		albedo = texture(uni_albedoTexture, thefrag_TexCoord).rgb;
		MRA = vec3(texture(uni_metallicTexture, thefrag_TexCoord).r, texture(uni_roughnessTexture, thefrag_TexCoord).r, texture(uni_aoTexture, thefrag_TexCoord).r);
	}
	else
	{
		albedo = uni_albedo;
		MRA = vec3(uni_MRA.r, uni_MRA.g, uni_MRA.b);
	}

	uni_geometryPassRT0 = vec4(thefrag_FragPos, MRA.r);
	uni_geometryPassRT1 = vec4(normalToWorldSpace, MRA.g);
	uni_geometryPassRT2 = vec4(albedo, MRA.b);
	uni_geometryPassRT3 = thefrag_FragPosInLightSpace;
}