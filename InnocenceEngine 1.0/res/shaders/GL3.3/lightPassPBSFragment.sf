// shadertype=glsl
#version 330 core
layout (location = 0) out vec4 uni_finalColor;

in vec2 TexCoords;

uniform vec3 uni_viewPos;
uniform sampler2D uni_RT0;
uniform sampler2D uni_RT1;
uniform sampler2D uni_RT2;
uniform sampler2D uni_RT3;

struct dirLight {
	vec3 direction;
    vec3 ambientColor;
    vec3 diffuseColor;
    vec3 specularColor;
};

struct pointLight {
	vec3 position;
	float radius;
	float constantFactor;
    float linearFactor;
    float quadraticFactor;

    vec3 ambientColor;
    vec3 diffuseColor;
    vec3 specularColor;
};

const float PI = 3.14159265359;

const int NR_POINT_LIGHTS = 3;

uniform dirLight uni_dirLight;

uniform pointLight uni_pointLights[NR_POINT_LIGHTS];

// ----------------------------------------------------------------------------
float DistributionGGX(vec3 N, vec3 H, float roughness)
{
    float a = roughness*roughness;
    float a2 = a*a;
    float NdotH = max(dot(N, H), 0.0);
    float NdotH2 = NdotH*NdotH;

    float nom   = a2;
    float denom = (NdotH2 * (a2 - 1.0) + 1.0);
    denom = PI * denom * denom;

    return nom / denom;
}
// ----------------------------------------------------------------------------
float GeometrySchlickGGX(float NdotV, float roughness)
{
    float r = (roughness + 1.0);
    float k = (r*r) / 8.0;

    float nom   = NdotV;
    float denom = NdotV * (1.0 - k) + k;

    return nom / denom;
}
// ----------------------------------------------------------------------------
float GeometrySmith(vec3 N, vec3 V, vec3 L, float roughness)
{
    float NdotV = max(dot(N, V), 0.0);
    float NdotL = max(dot(N, L), 0.0);
    float ggx2 = GeometrySchlickGGX(NdotV, roughness);
    float ggx1 = GeometrySchlickGGX(NdotL, roughness);

    return ggx1 * ggx2;
}
// ----------------------------------------------------------------------------
vec3 fresnelSchlick(float cosTheta, vec3 F0)
{
    return F0 + (1.0 - F0) * pow(1.0 - cosTheta, 5.0);
}

vec3 CalcDirectionalLightRadiance(dirLight light, vec3 albedo, float metallic, float roughness, float ao, vec3 normal, vec3 viewPos, vec3 fragPos, vec3 F0)
{
		// calculate per-light radiance
        vec3 normalizedLightDir = normalize(-light.direction);
		vec3 normalizedViewDir = normalize(viewPos - fragPos);
        vec3 normalizedHalfwayDir = normalize(normalizedViewDir + normalizedLightDir);

        // Cook-Torrance BRDF
        float NDF = DistributionGGX(normal, normalizedHalfwayDir, roughness);   
        float G   = GeometrySmith(normal, normalizedViewDir, normalizedLightDir, roughness);      
        vec3 F    = fresnelSchlick(max(dot(normalizedHalfwayDir, normalizedViewDir), 0.0), F0);
           
        vec3 nominator    = NDF * G * F; 
        float denominator = 4 * max(dot(normal, normalizedViewDir), 0.0) * max(dot(normal, normalizedLightDir), 0.0) + 0.001; // 0.001 to prevent divide by zero.
        vec3 specular = nominator / denominator;
        
        // kS is equal to Fresnel
        vec3 kS = F;
        // for energy conservation, the diffuse and specular light can't
        // be above 1.0 (unless the surface emits light); to preserve this
        // relationship the diffuse component (kD) should equal 1.0 - kS.
        vec3 kD = vec3(1.0) - kS;
        // multiply kD by the inverse metalness such that only non-metals 
        // have diffuse lighting, or a linear blend if partly metal (pure metals
        // have no diffuse light).
        kD *= 1.0 - metallic;	  

        // scale light by NdotL
        float NdotL = max(dot(normal, normalizedLightDir), 0.0);        

        // add to outgoing radiance Lo
        return ((kD * albedo / PI + specular) * NdotL);  // note that we already multiplied the BRDF by the Fresnel (kS) so we won't multiply by kS again
}

vec3 CalcPointLightRadiance(pointLight light, vec3 albedo, float metallic, float roughness, float ao, vec3 normal, vec3 viewPos, vec3 fragPos, vec3 F0)
{
	if(length(light.position - fragPos) < light.radius)
	{
		// calculate per-light radiance
        vec3 normalizedLightDir = normalize(light.position - fragPos);
		vec3 normalizedViewDir = normalize(viewPos - fragPos);
        vec3 normalizedHalfwayDir = normalize(normalizedViewDir + normalizedLightDir);

        // Cook-Torrance BRDF
        float NDF = DistributionGGX(normal, normalizedHalfwayDir, roughness);   
        float G   = GeometrySmith(normal, normalizedViewDir, normalizedLightDir, roughness);      
        vec3 F    = fresnelSchlick(max(dot(normalizedHalfwayDir, normalizedViewDir), 0.0), F0);
           
        vec3 nominator    = NDF * G * F; 
        float denominator = 4 * max(dot(normal, normalizedViewDir), 0.0) * max(dot(normal, normalizedLightDir), 0.0) + 0.001; // 0.001 to prevent divide by zero.
        vec3 specular = nominator / denominator;
        
        // kS is equal to Fresnel
        vec3 kS = F;
        // for energy conservation, the diffuse and specular light can't
        // be above 1.0 (unless the surface emits light); to preserve this
        // relationship the diffuse component (kD) should equal 1.0 - kS.
        vec3 kD = vec3(1.0) - kS;
        // multiply kD by the inverse metalness such that only non-metals 
        // have diffuse lighting, or a linear blend if partly metal (pure metals
        // have no diffuse light).
        kD *= 1.0 - metallic;	  

        // scale light by NdotL
        float NdotL = max(dot(normal, normalizedLightDir), 0.0);        

		// attenuation
		float distance = length(light.position - fragPos);
        vec3 attenuation = light.diffuseColor / (distance * distance);

        // add to outgoing radiance Lo
        return ((kD * albedo / PI + specular) * attenuation * NdotL);  // note that we already multiplied the BRDF by the Fresnel (kS) so we won't multiply by kS again
	}
	else
	{
	return vec3(0.0f, 0.0f, 0.0f);
	}
}

// ----------------------------------------------------------------------------
void main()
{	
	if(texture(uni_RT0, TexCoords).a == 1.0)
    {
	uni_finalColor.a = 0.0;
	}    
	else
	{
	vec3 FragPos	= texture(uni_RT0, TexCoords).rgb;
	vec3 Normal		= texture(uni_RT1, TexCoords).rgb;
    //vec3 Albedo     = pow(texture(uni_RT2, TexCoords).rgb, vec3(2.2));
	vec3 Albedo     = texture(uni_RT2, TexCoords).rgb;
    float Metallic  = texture(uni_RT3, TexCoords).r;
    float Roughness = texture(uni_RT3, TexCoords).g;
    float AO        = texture(uni_RT3, TexCoords).b;

    // calculate reflectance at normal incidence; if dia-electric (like plastic) use F0 
    // of 0.04 and if it's a metal, use the albedo color as F0 (metallic workflow)    
    vec3 F0 = vec3(0.04); 
    F0 = mix(F0, Albedo, Metallic);

    // reflectance equation
    vec3 Lo = vec3(0.0);

	Lo += CalcDirectionalLightRadiance(uni_dirLight, Albedo, Metallic, Roughness, AO, Normal, uni_viewPos, FragPos, F0);
    
	for(int i = 0; i < NR_POINT_LIGHTS; ++i) 
    {
        Lo += CalcPointLightRadiance(uni_pointLights[i], Albedo, Metallic, Roughness, AO, Normal, uni_viewPos, FragPos, F0);
    }       
	uni_finalColor.rgb = Lo;
	uni_finalColor.a = 1.0;
	}
}
