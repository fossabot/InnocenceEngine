// shadertype=glsl
#version 330 core

in vec2 thefrag_TexCoord;
in vec3 thefrag_ViewPos;
in vec3 thefrag_FragPos;
in mat3 TBN;

uniform sampler2D uni_specularTexture;
uniform sampler2D uni_diffuseTexture;
uniform sampler2D uni_normalTexture;

struct dirLight {
	vec3 direction;
    vec3 ambientColor;
    vec3 diffuseColor;
    vec3 specularColor;
};

struct pointLight {
	vec3 position;
	float constantFactor;
    float linearFactor;
    float quadraticFactor;

    vec3 ambientColor;
    vec3 diffuseColor;
    vec3 specularColor;
};

#define NR_POINT_LIGHTS 3

uniform dirLight uni_dirLight;

uniform pointLight uni_pointLights[NR_POINT_LIGHTS];

uniform bool uni_drawDepthBuffer;

out vec4 color;

float near = 0.1; 
float far  = 100.0; 

vec3 CalcDirLight(dirLight light, vec3 normal, vec3 viewPos, vec3 fragPos)
{	
	//light direction
	vec3 normalizedLightDir = normalize(-light.direction);

	//view direction
	vec3 normalizedViewDir = normalize(viewPos - fragPos);

	//ambient color
	vec3 ambient = vec3(texture(uni_diffuseTexture, thefrag_TexCoord)) * light.ambientColor;

	//diffuse color: texture * factor * light color
	vec3 diffuse = vec3(texture(uni_diffuseTexture, thefrag_TexCoord)) * max(dot(normal, normalizedLightDir), 0.0) * light.diffuseColor;
	
	// specular color: texture * factor * light color
	vec3 specular = vec3(texture(uni_specularTexture, thefrag_TexCoord)) * pow(max(dot(normal, normalize(normalizedLightDir + normalizedViewDir)), 0.0), 32) * light.specularColor;
	
	return (ambient + diffuse + specular) * 0.1;
}

vec3 CalcPointLight(pointLight light, vec3 normal, vec3 viewPos, vec3 fragPos)
{
	//light direction
	vec3 normalizedLightDir = normalize(light.position - fragPos);

	//view direction
	vec3 normalizedViewDir = normalize(viewPos - fragPos);

	//ambient color
	vec3 ambient = vec3(texture(uni_diffuseTexture, thefrag_TexCoord)) * light.ambientColor;

	//diffuse color: texture * factor * light color
	vec3 diffuse = vec3(texture(uni_diffuseTexture, thefrag_TexCoord)) * max(dot(normal, normalizedLightDir), 0.0) * light.diffuseColor;
	
	//specular color: texture * factor * light color
	vec3 specular = vec3(texture(uni_specularTexture, thefrag_TexCoord)) * pow(max(dot(normal, normalize(normalizedLightDir + normalizedViewDir)), 0.0), 32) * light.specularColor;
	
	//attenuation
	float distance = length(light.position - fragPos);
    float attenuation = 1.0 / (light.constantFactor + light.linearFactor * distance + light.quadraticFactor * (distance * distance)); 
	
	ambient  *= attenuation;
    diffuse  *= attenuation;
    specular *= attenuation;

	return (ambient + diffuse + specular);
}

float LinearizeDepth(float depth) 
{
    float z = depth * 2.0 - 1.0; // back to NDC 
    return (2.0 * near * far) / (far + near - z * (far - near));	
}

void main()
{	
	if(uni_drawDepthBuffer)
	{
		// depthBuffer visualizer       
		vec3 depthBufferColor = vec3(LinearizeDepth(gl_FragCoord.z) / far);
    
		//final result
		color = vec4(depthBufferColor, 1.0);
	}
	else
	{	
	//normal
	vec3 normalizedNormal = normalize(normalize(texture(uni_normalTexture, thefrag_TexCoord).rgb * 2.0 - 1.0) * TBN);

	//final result
	vec3 finalColor = CalcDirLight(uni_dirLight, normalizedNormal, thefrag_ViewPos, thefrag_FragPos);

	for(int i = 0; i < NR_POINT_LIGHTS; i++)
    {
		finalColor += CalcPointLight(uni_pointLights[i], normalizedNormal, thefrag_ViewPos, thefrag_FragPos);  
	}

	color = vec4(finalColor, 1.0);
	}
}