// shadertype=glsl
#version 330 core
layout (location = 0) out vec4 m_gPosition;
layout (location = 1) out vec4 m_gNormal;
layout (location = 2) out vec4 m_gAlbedo;
layout (location = 3) out vec4 m_gSpecular;

in vec4 thefrag_FragPos;
in vec2 thefrag_TexCoord;
in mat3 TBN;

uniform sampler2D uni_albedoTexture;
uniform sampler2D uni_specularTexture;
uniform sampler2D uni_normalTexture;

void main()
{    
    // store the fragment position vector in the first gbuffer texture
    m_gPosition = thefrag_FragPos;

    // also store the per-fragment normals into the gbuffer
	m_gNormal = vec4(normalize(normalize(texture(uni_normalTexture, thefrag_TexCoord).rgb * 2.0 - 1.0) * TBN), 1.0);

    // and the diffuse per-fragment color
    m_gAlbedo = texture(uni_albedoTexture, thefrag_TexCoord);

    // specular
    m_gSpecular = texture(uni_specularTexture, thefrag_TexCoord);
}