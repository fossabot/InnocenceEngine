// shadertype=glsl
#version 330 core
layout (location = 0) out vec3 m_gPosition;
layout (location = 1) out vec3 m_gNormal;
layout (location = 2) out vec3 m_gAlbedo;
layout (location = 3) out vec3 m_gSpecular;

in vec3 FragPos;
in vec2 TexCoords;
in vec3 Normal;

uniform sampler2D uni_diffuseTexture;
uniform sampler2D uni_specularTexture;
uniform sampler2D uni_normalTexture;

void main()
{    
    // store the fragment position vector in the first gbuffer texture
    m_gPosition = FragPos;

    // also store the per-fragment normals into the gbuffer
    m_gNormal = normalize(Normal);

    // and the diffuse per-fragment color
    m_gAlbedo.rgb = texture(uni_diffuseTexture, TexCoords).rgb;

    // specular
    m_gSpecular.rgb = texture(uni_specularTexture, TexCoords).rgb;
}