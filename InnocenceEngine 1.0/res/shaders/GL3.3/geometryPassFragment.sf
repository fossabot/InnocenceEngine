// shadertype=glsl
#version 330 core
layout (location = 0) out vec3 m_gPosition;
layout (location = 1) out vec3 m_gNormal;
layout (location = 2) out vec4 m_gAlbedoSpec;

in vec3 FragPos;
in vec2 TexCoords;
in vec3 Normal;

uniform sampler2D texture_diffuse1;
uniform sampler2D texture_specular1;

out vec4 FragColor;
void main()
{    
    // store the fragment position vector in the first gbuffer texture
    m_gPosition = FragPos;

    // also store the per-fragment normals into the gbuffer
    m_gNormal = normalize(Normal);

    // and the diffuse per-fragment color
    m_gAlbedoSpec.rgb = texture(texture_diffuse1, TexCoords).rgb;

    // store specular intensity in gAlbedoSpec's alpha component
    m_gAlbedoSpec.a = texture(texture_specular1, TexCoords).r;

	FragColor = vec4(vec3(0.5, 0.2, 0.4), 1.0);
}